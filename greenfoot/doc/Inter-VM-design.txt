Inter-VM Design
===============
This document describes how various cross-VM activities take place in Greenfoot, such as dragging
actors in the world display, right-clicking on them, starting the simulation, drawing the world,
sending keyboard and mouse events and so on.  This code is necessarily split in the Greenfoot
source (since sender and receiver will always be in different classes in different VMs), so this
document serves as a way to document per functionality in one place.

Most of the implementation of the inter-VM communication can be found in the following two
classes:

 - greenfoot.vmcomm.VMCommsMain  (main VM side)
 - greenfoot.vmcomm.VMCommsSimulation   ("debug" VM side)


Types of cross-VM communication
===============================
The server VM and debug VM are connected via the Java Debug Interface (JDI) and share a memory
buffer.  The shared memory buffer is fast and good for transferring a lot of byte-level data, but
JDI is useful where more complex values (e.g. object references) need to be transferred.

There are two main ways for the server VM to communicate to the debug VM:
 - Inserting some commands into the shared memory buffer
 - Using BlueJ's existing worker mechanism to execute code remotely in the debug VM.

Correspondingly, there are two main ways for the debug VM to communicate to the server VM:
 - Inserting some data into the shared memory buffer
 - Hitting a special breakpoint, at which point the server VM knows to inspect certain values

Shared memory is good for simple commands, the worker/JDI mechanism is good for more complex items.
In general, shared memory should be used for everything, unless there is a reason it cannot be.


Run and Pause
-------------
When the server VM wants to issue a Run order, it puts a command into shared memory.  When the debug
VM sees this, it changes the simulation state.  The same happens for the Pause order.

Simulation State
----------------

Simulation state is changed on the debug VM, where the simulation thread changes between running
user code, pausing and so on.  The server VM needs to track this state for the purposes of updating
the GUI, e.g. changing the Run button to a Pause button, disabling Act while running, setting the
buttons enabled after the world is ready.  This was perhaps a bit marginal choice between using
SHM to send notifications, and using JDI with special breakpoints.  For now, it uses JDI. 

World display
-------------
When the debug VM is ready to display a new frame, it draws it into the shared memory, and the server
VM copies it out on to the screen.


Keyboard and mouse events
-------------------------
When the user clicks or presses keys on the display window (on the server VM), the server VM puts
corresponding commands into the shared memory which are read by the debug VM.


Object creation
---------------
When the user makes a new object using the context menus in the interface, the server VM makes a
worker call to instantiate the class.  Via a BlueJ event listener on the server VM, it listens for
a successful result, and then uses the class hierarchy to decide what happens:
 - In the case of a world, a further worker call is issued to create a SetWorldHelper to
   pass the new world to Greenfoot.setWorld
 - In the case of an actor, the reference is stored, and then the image for that actor class is shown
   as a hovering preview while the user mouses around.  Once they click to place the actor, a
   worker call is issued to create an AddToWorldHelper to call addObject on the debug VM.
 - In the case of non-actor/world classes, an inspector is created to inspect the object.

(Shared memory can't be used here because we need to act on the reference of the new object)


Object removal
--------------
When the user selects to delete an object from the world from the interface, we create a
RemoveFromWorldHelper instance which, upon construction, contacts the world to remove
the passed object reference.

(Shared memory can't be used here because we need to act on the reference of the object being removed)


Right-clicking on actor/world
-----------------------------
When the user right-clicks in the display window (on the server VM), we need to find out which
actor they have clicked on.  The debug VM has this information, so the server VM issues a worker call
to create a PickActorHelper which finds out the reference(s) of any actor(s) at that location.
PickActorHelper has a special breakpoint set which it then runs into.  At this point, the server VM
interrogates the PickActorHelper's fields to access the reference.  It then uses BlueJ's existing
code to create a right-click menu with that object's methods, which may then be called on that
actor using BlueJ's existing worker mechanisms, using a custom runner in ExecServer to run on
the simulation thread.

Right-clicking on the world works exactly the same way, but PickActorHelper stores a reference to
the world object instead, in that case.

(Shared memory can't be used here because we need to act on the reference of the clicked object)


Dragging an actor
-----------------

There are three separate steps involved in dragging an actor.

The first is the initial pick: when the user starts dragging the mouse on the server VM, we must
find out which actor is topmost under the mouse.  We only want to pick at the start of the drag:
we don't want to repick while the mouse continues to be held, as then the user's drag might "transfer"
to another actor earlier in the paint order as they drag around.  To do the pick, we use the same
worker call to PickActorHelper as we do for right-clicking an actor (see above), but we set a special
field indicating to start a drag for the result (if an actor is found).  Thus the debug VM keeps
a record of which actor is being dragged, along with an ID for the drag generated by the server VM.

The second aspect is the continuing drag.  As the user moves the mouse around, this new position
needs to be communicated to the debug VM and used to set a new location for the dragged object.  This
communication of the new position is done via a shared memory command.

The third aspect is stopping the drag.  This happens when the mouse is released on the server VM.
This communication is also done via a shared memory command.


setWorld
--------

When a new world is set, either by creating one in the interface, or by some user code calling
Greenfoot.setWorld, the code reaches a special breakpoint in WorldHandler.worldChanged in the debug VM.
This is seen by GreenfootDebugHandler on the server VM side, and the world reference is taken
and passed to GreenfootRecorder, which needs to know it for spotting method calls on the world
(as opposed to actors).

(Shared memory can't be used here because we need the reference of the world object)


Greenfoot.ask
-------------

When the user code calls Greenfoot.ask, it needs to block until it gets an answer.  So we use
a technique similar to GUI frameworks when they show a modal dialog: we enter a nested
server VM polling loop until we get an answer (see WorldHandlerDelegateIDE.ask).  The communication
is a little weird, because ask is the only situation where the debug VM needs to send a request
to the server VM, and we don't have a command list+ack from debug to server VM like we do in the
opposite direction.  So we just include the request in every frame from the debug VM until it
is answered, using an ask ID to identify ask requests so that the server VM can tell if it's
a new request or a stale request.  The answer is sent as a command from server VM to debug VM,
which will get acknowledged as usual.
